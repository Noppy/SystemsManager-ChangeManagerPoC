schemaVersion: '0.3'
description: >-
  ##Title: Attach/Detach High authority policy to Specific Role

  -----

  **Purpose**: This Automation Runbook attaches a specific policy 
  if the specified policy is not in the role. If there is, detach it.

  A policy and a role are specifed by code in this Runbook.

  ##Parameters:
  None

  -----
assumeRole: '<AssumeRoleArn>'
mainSteps:
  - name: AttachOrDetachPolicy
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.6
      Handler: script_handler
      Script: |-
        # -*- coding: utf-8 -*-
        import json
        import boto3

        ROLE_NAME = "Ec2-SsmTestRole"
        POLICY_NAME = "SsmTest-TestIamPolicy"

        def script_handler():
          # Get Session
          sts = boto3.client('sts')
          iam = boto3.client('iam')

          # Get Account ID
          ret = sts.get_caller_identity()
          awsaccuntid = ret['Account']

          # Get a list of policies attached to the ROLE_NAME role.
          policies = iam.list_attached_role_policies(
            RoleName = ROLE_NAME,
          )

          # Check Policy
          policy_exist = False
          for policy in policies['AttachedPolicies']:
              if policy['PolicyName'] == POLICY_NAME:
                policy_exist = True

          # Attach/Detach a policy
          policy_arn = 'arn:aws:iam::{0:s}:policy/{1:s}'.format(awsaccuntid, POLICY_NAME)
          if policy_exist:
              iam.detach_role_policy(
                RoleName  = ROLE_NAME,
                PolicyArn =  policy_arn
              )
          else:
              iam.attach_role_policy(
                RoleName  = ROLE_NAME,
                PolicyArn =  policy_arn
              )

          return
    description: >-
      Attach/Detach High authority policy